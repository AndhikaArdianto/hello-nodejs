{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/YARSI-Connect-Alumni-main/YARSI-Connect-Alumni-main/YARSI-Connect Alumni/front-end/src/pages/VerifikasiAcaraProdi.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport { getEventsToBeVerified } from \"../api/Api\";\nimport TabelVerifikasiAcara from \"../components/TabelVerifikasiAcara\";\nimport { useGlobal } from \"../context/GlobalContext\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction VerifikasiAcaraProdi() {\n  _s();\n  const {\n    globalData\n  } = useGlobal();\n  const username = globalData.username;\n  const [acara, setAcara] = useState([]);\n  const fetchAcara = useCallback(async () => {\n    try {\n      const response = await getEventsToBeVerified();\n      const acaraArray = response.data.data;\n      if (Array.isArray(acaraArray)) {\n        const acaraData = acaraArray.filter(item => item.authorName !== username).map(item => ({\n          id: item.id,\n          title: item.title,\n          image: item.image,\n          content: item.description,\n          createdAt: item.createdAt,\n          authorName: item.author.username,\n          date: item.date\n        }));\n        setAcara(acaraData);\n      } else {\n        console.error(\"Data yang diterima bukan array:\", acaraArray);\n      }\n    } catch (error) {\n      console.error(\"Error fetching acara: \", error);\n    }\n  }, [username]);\n  useEffect(() => {\n    fetchAcara();\n  }, [fetchAcara]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TabelVerifikasiAcara, {\n      acaraProdi: acara,\n      refreshAcara: fetchAcara\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(VerifikasiAcaraProdi, \"i/WyqvASguLq0LXoxHverabhAyY=\", false, function () {\n  return [useGlobal];\n});\n_c = VerifikasiAcaraProdi;\nexport default VerifikasiAcaraProdi;\nvar _c;\n$RefreshReg$(_c, \"VerifikasiAcaraProdi\");","map":{"version":3,"names":["useState","useEffect","useCallback","getEventsToBeVerified","TabelVerifikasiAcara","useGlobal","jsxDEV","_jsxDEV","Fragment","_Fragment","VerifikasiAcaraProdi","_s","globalData","username","acara","setAcara","fetchAcara","response","acaraArray","data","Array","isArray","acaraData","filter","item","authorName","map","id","title","image","content","description","createdAt","author","date","console","error","children","acaraProdi","refreshAcara","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ubuntu/YARSI-Connect-Alumni-main/YARSI-Connect-Alumni-main/YARSI-Connect Alumni/front-end/src/pages/VerifikasiAcaraProdi.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport { getEventsToBeVerified } from \"../api/Api\";\nimport TabelVerifikasiAcara from \"../components/TabelVerifikasiAcara\";\nimport { useGlobal } from \"../context/GlobalContext\";\n\nfunction VerifikasiAcaraProdi() {\n  const { globalData } = useGlobal();\n  const username = globalData.username;\n\n  const [acara, setAcara] = useState([]);\n\n  const fetchAcara = useCallback(async () => {\n    try {\n      const response = await getEventsToBeVerified();\n      const acaraArray = response.data.data;\n\n      if (Array.isArray(acaraArray)) {\n        const acaraData = acaraArray\n          .filter((item) => item.authorName !== username) \n          .map((item) => ({\n            id: item.id,\n            title: item.title,\n            image: item.image,\n            content: item.description,\n            createdAt: item.createdAt,\n            authorName: item.author.username,\n            date: item.date,\n          }));\n        setAcara(acaraData); \n      } else {\n        console.error(\"Data yang diterima bukan array:\", acaraArray);\n      }\n    } catch (error) {\n      console.error(\"Error fetching acara: \", error);\n    }\n  }, [username]);\n\n  useEffect(() => {\n    fetchAcara();\n  }, [fetchAcara]);\n\n  return (\n    <>\n      <TabelVerifikasiAcara acaraProdi={acara} refreshAcara={fetchAcara} />\n    </>\n  );\n}\n\nexport default VerifikasiAcaraProdi;"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,qBAAqB,QAAQ,YAAY;AAClD,OAAOC,oBAAoB,MAAM,oCAAoC;AACrE,SAASC,SAAS,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAErD,SAASC,oBAAoBA,CAAA,EAAG;EAAAC,EAAA;EAC9B,MAAM;IAAEC;EAAW,CAAC,GAAGP,SAAS,CAAC,CAAC;EAClC,MAAMQ,QAAQ,GAAGD,UAAU,CAACC,QAAQ;EAEpC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAEtC,MAAMgB,UAAU,GAAGd,WAAW,CAAC,YAAY;IACzC,IAAI;MACF,MAAMe,QAAQ,GAAG,MAAMd,qBAAqB,CAAC,CAAC;MAC9C,MAAMe,UAAU,GAAGD,QAAQ,CAACE,IAAI,CAACA,IAAI;MAErC,IAAIC,KAAK,CAACC,OAAO,CAACH,UAAU,CAAC,EAAE;QAC7B,MAAMI,SAAS,GAAGJ,UAAU,CACzBK,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,UAAU,KAAKZ,QAAQ,CAAC,CAC9Ca,GAAG,CAAEF,IAAI,KAAM;UACdG,EAAE,EAAEH,IAAI,CAACG,EAAE;UACXC,KAAK,EAAEJ,IAAI,CAACI,KAAK;UACjBC,KAAK,EAAEL,IAAI,CAACK,KAAK;UACjBC,OAAO,EAAEN,IAAI,CAACO,WAAW;UACzBC,SAAS,EAAER,IAAI,CAACQ,SAAS;UACzBP,UAAU,EAAED,IAAI,CAACS,MAAM,CAACpB,QAAQ;UAChCqB,IAAI,EAAEV,IAAI,CAACU;QACb,CAAC,CAAC,CAAC;QACLnB,QAAQ,CAACO,SAAS,CAAC;MACrB,CAAC,MAAM;QACLa,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAElB,UAAU,CAAC;MAC9D;IACF,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC,EAAE,CAACvB,QAAQ,CAAC,CAAC;EAEdZ,SAAS,CAAC,MAAM;IACde,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;EAEhB,oBACET,OAAA,CAAAE,SAAA;IAAA4B,QAAA,eACE9B,OAAA,CAACH,oBAAoB;MAACkC,UAAU,EAAExB,KAAM;MAACyB,YAAY,EAAEvB;IAAW;MAAAwB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACrE,CAAC;AAEP;AAAChC,EAAA,CAzCQD,oBAAoB;EAAA,QACJL,SAAS;AAAA;AAAAuC,EAAA,GADzBlC,oBAAoB;AA2C7B,eAAeA,oBAAoB;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}