{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/YARSI-Connect-Alumni-main/YARSI-Connect-Alumni-main/YARSI-Connect-Alumni/front-end/src/pages/ProgramAlumni.js\",\n  _s = $RefreshSig$();\nimport NavigationBar from '../components/NavigationBar';\nimport \"../styles/programAlumni.css\";\nimport ProgramAlumniCards from '../components/ProgramAlumniCards';\nimport { useState, useEffect } from 'react';\nimport { getProgramAlumni } from '../api/Api';\nimport Footer from '../components/Footer';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ProgramAlumni() {\n  _s();\n  const [program, setProgram] = useState([]);\n  useEffect(() => {\n    const fetchProgram = async () => {\n      try {\n        const response = await getProgramAlumni();\n        const programArray = response.data.data;\n        if (Array.isArray(programArray)) {\n          const programData = programArray.map(item => ({\n            id: item.id,\n            image: item.image,\n            authorId: item.authorId,\n            title: item.title,\n            content: item.description,\n            createdAt: item.createdAt,\n            category: item.category\n          }));\n          setProgram(programData);\n        } else {\n          console.error(\"Data yang diterima bukan array:\", programArray);\n        }\n      } catch (error) {\n        console.error(\"Error fetching program: \", error);\n      }\n    };\n    fetchProgram();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavigationBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ProgramAlumniCards, {\n      program: program,\n      columnCount: 3\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(ProgramAlumni, \"tDh048TVCo02C563GJ4WO1ITE2o=\");\n_c = ProgramAlumni;\nexport default ProgramAlumni;\nvar _c;\n$RefreshReg$(_c, \"ProgramAlumni\");","map":{"version":3,"names":["NavigationBar","ProgramAlumniCards","useState","useEffect","getProgramAlumni","Footer","jsxDEV","_jsxDEV","Fragment","_Fragment","ProgramAlumni","_s","program","setProgram","fetchProgram","response","programArray","data","Array","isArray","programData","map","item","id","image","authorId","title","content","description","createdAt","category","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","columnCount","_c","$RefreshReg$"],"sources":["/home/ubuntu/YARSI-Connect-Alumni-main/YARSI-Connect-Alumni-main/YARSI-Connect-Alumni/front-end/src/pages/ProgramAlumni.js"],"sourcesContent":["import NavigationBar from '../components/NavigationBar';\nimport \"../styles/programAlumni.css\"\nimport ProgramAlumniCards from '../components/ProgramAlumniCards';\nimport { useState, useEffect } from 'react';\nimport { getProgramAlumni } from '../api/Api';\nimport Footer from '../components/Footer';\n\n\nfunction ProgramAlumni() {\n    const [program, setProgram] = useState([]);\n    useEffect(() => {\n        const fetchProgram = async () => {\n            try {\n                const response = await getProgramAlumni(); \n                const programArray = response.data.data;\n\n                if (Array.isArray(programArray)) {\n                    const programData = programArray.map(item => ({\n                        id: item.id,\n                        image: item.image,\n                        authorId: item.authorId,\n                        title: item.title,\n                        content: item.description,\n                        createdAt: item.createdAt,\n                        category: item.category,\n                    }));\n                    setProgram(programData); \n                } else {\n                    console.error(\"Data yang diterima bukan array:\", programArray);\n                }\n            } catch (error) {\n                console.error(\"Error fetching program: \", error);\n            }\n\n        };\n\n        fetchProgram();\n    }, []);\n\n    return (\n        <>\n            <NavigationBar />\n            <ProgramAlumniCards program={program} columnCount={3} />\n            <Footer />\n        </>\n    );\n}\n\nexport default ProgramAlumni;"],"mappings":";;AAAA,OAAOA,aAAa,MAAM,6BAA6B;AACvD,OAAO,6BAA6B;AACpC,OAAOC,kBAAkB,MAAM,kCAAkC;AACjE,SAASC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,gBAAgB,QAAQ,YAAY;AAC7C,OAAOC,MAAM,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAG1C,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1CC,SAAS,CAAC,MAAM;IACZ,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMX,gBAAgB,CAAC,CAAC;QACzC,MAAMY,YAAY,GAAGD,QAAQ,CAACE,IAAI,CAACA,IAAI;QAEvC,IAAIC,KAAK,CAACC,OAAO,CAACH,YAAY,CAAC,EAAE;UAC7B,MAAMI,WAAW,GAAGJ,YAAY,CAACK,GAAG,CAACC,IAAI,KAAK;YAC1CC,EAAE,EAAED,IAAI,CAACC,EAAE;YACXC,KAAK,EAAEF,IAAI,CAACE,KAAK;YACjBC,QAAQ,EAAEH,IAAI,CAACG,QAAQ;YACvBC,KAAK,EAAEJ,IAAI,CAACI,KAAK;YACjBC,OAAO,EAAEL,IAAI,CAACM,WAAW;YACzBC,SAAS,EAAEP,IAAI,CAACO,SAAS;YACzBC,QAAQ,EAAER,IAAI,CAACQ;UACnB,CAAC,CAAC,CAAC;UACHjB,UAAU,CAACO,WAAW,CAAC;QAC3B,CAAC,MAAM;UACHW,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEhB,YAAY,CAAC;QAClE;MACJ,CAAC,CAAC,OAAOgB,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MACpD;IAEJ,CAAC;IAEDlB,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACIP,OAAA,CAAAE,SAAA;IAAAwB,QAAA,gBACI1B,OAAA,CAACP,aAAa;MAAAkC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACjB9B,OAAA,CAACN,kBAAkB;MAACW,OAAO,EAAEA,OAAQ;MAAC0B,WAAW,EAAE;IAAE;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxD9B,OAAA,CAACF,MAAM;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA,eACZ,CAAC;AAEX;AAAC1B,EAAA,CAtCQD,aAAa;AAAA6B,EAAA,GAAb7B,aAAa;AAwCtB,eAAeA,aAAa;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}