{"ast":null,"code":"import _objectSpread from\"/home/ubuntu/YARSI-Connect-Alumni-main/YARSI-Connect-Alumni-main/YARSI-Connect Alumni/front-end/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{createContext,useContext,useState,useEffect}from\"react\";import axios from'axios';// Membuat Context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const GlobalContext=/*#__PURE__*/createContext();// Provider untuk menyediakan data global\nexport const GlobalProvider=_ref=>{let{children}=_ref;const[globalData,setGlobalData]=useState({role:\"\",username:\"\",id:\"\",showLogoutModal:false});// Memuat data dari localStorage jika ada\nuseEffect(()=>{const storedRole=localStorage.getItem('role');const storedUsername=localStorage.getItem('username');const storedId=localStorage.getItem('id');if(storedRole){setGlobalData(prevData=>_objectSpread(_objectSpread({},prevData),{},{role:storedRole,username:storedUsername||\"\",id:storedId||\"\"}));}},[]);// Fungsi untuk update global data dan localStorage\nconst updateGlobalData=(key,value)=>{setGlobalData(prevData=>_objectSpread(_objectSpread({},prevData),{},{[key]:value}));localStorage.setItem(key,value);};// Fungsi untuk clear global data\nconst clearGlobalData=()=>{setGlobalData({role:\"\",username:\"\",id:\"\",showLogoutModal:false});// Hapus data dari localStorage\nlocalStorage.removeItem('role');localStorage.removeItem('username');localStorage.removeItem('id');localStorage.removeItem('token');// Hapus token jika ada\n};return/*#__PURE__*/_jsx(GlobalContext.Provider,{value:{globalData,updateGlobalData,clearGlobalData},children:children});};// Hook untuk menggunakan data Global\nexport const useGlobal=()=>useContext(GlobalContext);// Fungsi untuk login dan menyimpan data ke GlobalContext\nexport const loginUser=async(credentials,updateGlobalData)=>{try{const response=await axios.post('/api/login',credentials);const{data}=response;// Simpan data ke GlobalContext\nupdateGlobalData('role',data.user.role.name);updateGlobalData('username',data.user.username);updateGlobalData('id',data.user.id);// Simpan token di localStorage juga jika diperlukan\nlocalStorage.setItem('token',data.token);}catch(error){console.error(\"Login failed:\",error);}};","map":{"version":3,"names":["createContext","useContext","useState","useEffect","axios","jsx","_jsx","GlobalContext","GlobalProvider","_ref","children","globalData","setGlobalData","role","username","id","showLogoutModal","storedRole","localStorage","getItem","storedUsername","storedId","prevData","_objectSpread","updateGlobalData","key","value","setItem","clearGlobalData","removeItem","Provider","useGlobal","loginUser","credentials","response","post","data","user","name","token","error","console"],"sources":["/home/ubuntu/YARSI-Connect-Alumni-main/YARSI-Connect-Alumni-main/YARSI-Connect Alumni/front-end/src/context/GlobalContext.js"],"sourcesContent":["import { createContext, useContext, useState, useEffect } from \"react\";\nimport axios from 'axios';\n\n// Membuat Context\nconst GlobalContext = createContext();\n\n// Provider untuk menyediakan data global\nexport const GlobalProvider = ({ children }) => {\n    const [globalData, setGlobalData] = useState({\n        role: \"\",\n        username: \"\",\n        id: \"\", \n        showLogoutModal: false,\n    });\n\n    // Memuat data dari localStorage jika ada\n    useEffect(() => {\n        const storedRole = localStorage.getItem('role');\n        const storedUsername = localStorage.getItem('username');\n        const storedId = localStorage.getItem('id');\n\n        if (storedRole) {\n            setGlobalData((prevData) => ({\n                ...prevData,\n                role: storedRole,\n                username: storedUsername || \"\",\n                id: storedId || \"\",\n            }));\n        }\n    }, []);\n\n    // Fungsi untuk update global data dan localStorage\n    const updateGlobalData = (key, value) => {\n        setGlobalData((prevData) => ({\n            ...prevData,\n            [key]: value,\n        }));\n        localStorage.setItem(key, value);\n    };\n\n    // Fungsi untuk clear global data\n    const clearGlobalData = () => {\n        setGlobalData({\n            role: \"\",\n            username: \"\",\n            id: \"\",\n            showLogoutModal: false,\n        });\n\n        // Hapus data dari localStorage\n        localStorage.removeItem('role');\n        localStorage.removeItem('username');\n        localStorage.removeItem('id');\n        localStorage.removeItem('token'); // Hapus token jika ada\n    };\n\n    return (\n        <GlobalContext.Provider value={{ globalData, updateGlobalData, clearGlobalData }}>\n            {children}\n        </GlobalContext.Provider>\n    );\n};\n\n// Hook untuk menggunakan data Global\nexport const useGlobal = () => useContext(GlobalContext);\n\n// Fungsi untuk login dan menyimpan data ke GlobalContext\nexport const loginUser = async (credentials, updateGlobalData) => {\n    try {\n        const response = await axios.post('/api/login', credentials);\n        const { data } = response;\n\n        // Simpan data ke GlobalContext\n        updateGlobalData('role', data.user.role.name);\n        updateGlobalData('username', data.user.username);\n        updateGlobalData('id', data.user.id);\n\n        // Simpan token di localStorage juga jika diperlukan\n        localStorage.setItem('token', data.token);\n    } catch (error) {\n        console.error(\"Login failed:\", error);\n    }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}