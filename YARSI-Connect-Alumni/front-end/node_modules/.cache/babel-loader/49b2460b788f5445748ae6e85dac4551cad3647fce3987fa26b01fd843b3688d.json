{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/YARSI-Connect-Alumni-main/YARSI-Connect-Alumni-main/YARSI-Connect-Alumni/front-end/src/pages/VerifikasiProgramAlumni.js\",\n  _s = $RefreshSig$();\nimport TabelVerifikasiProgramAlumni from \"../components/TabelVerifikasiProgramAlumni\";\nimport { useState, useEffect } from 'react';\nimport { getProgramAlumniToBeVerified } from '../api/Api';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction VerifikasiProgramAlumni() {\n  _s();\n  const [program, setProgram] = useState([]);\n  useEffect(() => {\n    const fetchProgram = async () => {\n      try {\n        const response = await getProgramAlumniToBeVerified();\n        const programArray = response.data.data;\n        if (Array.isArray(programArray)) {\n          const programData = programArray.map(item => ({\n            id: item.id,\n            image: item.image,\n            authorId: item.authorId,\n            title: item.title,\n            content: item.description,\n            createdAt: item.createdAt,\n            category: item.category,\n            authorName: item.author.username,\n            status: item.AlumniProgramStatus\n          }));\n          setProgram(programData);\n        } else {\n          console.error(\"Data yang diterima bukan array:\", programArray);\n        }\n      } catch (error) {\n        console.error(\"Error fetching program: \", error);\n      }\n    };\n    fetchProgram();\n  }, []);\n  const refreshProgram = async () => {\n    try {\n      const response = await getProgramAlumniToBeVerified();\n      const programArray = response.data.data;\n      if (Array.isArray(programArray)) {\n        const programData = programArray.map(item => ({\n          id: item.id,\n          image: item.image,\n          authorId: item.authorId,\n          title: item.title,\n          content: item.description,\n          createdAt: item.createdAt,\n          category: item.category,\n          authorName: item.author.username,\n          submissionStatus: item.submissionStatus\n        }));\n        setProgram(programData);\n      }\n    } catch (error) {\n      console.error(\"Error refreshing program: \", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(TabelVerifikasiProgramAlumni, {\n      program: program,\n      onRefresh: refreshProgram\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(VerifikasiProgramAlumni, \"tDh048TVCo02C563GJ4WO1ITE2o=\");\n_c = VerifikasiProgramAlumni;\nexport default VerifikasiProgramAlumni;\nvar _c;\n$RefreshReg$(_c, \"VerifikasiProgramAlumni\");","map":{"version":3,"names":["TabelVerifikasiProgramAlumni","useState","useEffect","getProgramAlumniToBeVerified","jsxDEV","_jsxDEV","Fragment","_Fragment","VerifikasiProgramAlumni","_s","program","setProgram","fetchProgram","response","programArray","data","Array","isArray","programData","map","item","id","image","authorId","title","content","description","createdAt","category","authorName","author","username","status","AlumniProgramStatus","console","error","refreshProgram","submissionStatus","children","onRefresh","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ubuntu/YARSI-Connect-Alumni-main/YARSI-Connect-Alumni-main/YARSI-Connect-Alumni/front-end/src/pages/VerifikasiProgramAlumni.js"],"sourcesContent":["import TabelVerifikasiProgramAlumni from \"../components/TabelVerifikasiProgramAlumni\";\nimport { useState, useEffect } from 'react';\nimport { getProgramAlumniToBeVerified } from '../api/Api';\n\nfunction VerifikasiProgramAlumni() {\n    const [program, setProgram] = useState([]);\n    useEffect(() => {\n        const fetchProgram = async () => {\n            try {\n                const response = await getProgramAlumniToBeVerified();\n                const programArray = response.data.data;\n\n                if (Array.isArray(programArray)) {\n                    const programData = programArray.map(item => ({\n                        id: item.id,\n                        image: item.image,\n                        authorId: item.authorId,\n                        title: item.title,\n                        content: item.description,\n                        createdAt: item.createdAt,\n                        category: item.category,\n                        authorName: item.author.username,\n                        status: item.AlumniProgramStatus\n                    }));\n                    setProgram(programData); \n                } else {\n                    console.error(\"Data yang diterima bukan array:\", programArray);\n                }\n            } catch (error) {\n                console.error(\"Error fetching program: \", error);\n            }\n\n        };\n\n        fetchProgram();\n    }, []);\n\n    const refreshProgram = async () => {\n        try {\n            const response = await getProgramAlumniToBeVerified();\n            const programArray = response.data.data;\n\n            if (Array.isArray(programArray)) {\n                const programData = programArray.map(item => ({\n                    id: item.id,\n                    image: item.image,\n                    authorId: item.authorId,\n                    title: item.title,\n                    content: item.description,\n                    createdAt: item.createdAt,\n                    category: item.category,\n                    authorName: item.author.username,\n                    submissionStatus: item.submissionStatus\n                }));\n                setProgram(programData);\n            }\n        } catch (error) {\n            console.error(\"Error refreshing program: \", error);\n        }\n    };\n\n    return (\n        <>\n            <TabelVerifikasiProgramAlumni program={program} onRefresh={refreshProgram} />\n        </>\n    )\n}\n\nexport default VerifikasiProgramAlumni;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}